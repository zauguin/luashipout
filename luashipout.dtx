% \iffalse meta-comment
%
%% Copyright (C) 2020 by Marcel Krueger
%%
%% This file may be distributed and/or modified under the
%% conditions of the LaTeX Project Public License, either
%% version 1.3c of this license or (at your option) any later
%% version. The latest version of this license is in:
%%
%% http://www.latex-project.org/lppl.txt
%%
%% and version 1.3 or later is part of all distributions of
%% LaTeX version 2005/12/01 or later.
%
%<*batch>
%<*gobble>
\ifx\jobname\relax\let\documentclass\undefined\fi
\ifx\documentclass\undefined
\csname fi\endcsname
%</gobble>
\input docstrip.tex
\keepsilent
\let\MetaPrefix\relax
\preamble
\endpreamble
\postamble
\endpostamble
\def\MetaPrefix{--}
\generate{%
  \file{luashipout.lua}{\from{luashipout.dtx}{luacode}}%
}
\let\MetaPrefix\DoubleperCent
\generate{%
  \file{luashipout.sty}{\from{luashipout.dtx}{package}}
  \file{luashipout.tex}{\from{luashipout.dtx}{tex-package}}}
\endbatchfile
%</batch>
%<*gobble>
\fi
\expandafter\ifx\csname @currname\endcsname\empty
\csname fi\endcsname
%</gobble>
%<*driver>
\RequirePackage{luashipout}
\documentclass{article}
\usepackage{csquotes,doc,metalogo,hyperref,luacolor,tikzducks,pict2e}
\RecordChanges
\MakeShortVerb\|
\begin{document}
\DocInput{luashipout.dtx}
\PrintIndex
\PrintChanges
\end{document}
%</driver>
%<*gobble>
\fi
%</gobble>
% \fi
%
% \GetFileInfo{luashipout.sty}
% \title{The luashipout package\thanks{This document
%        corresponds to luashipout~\fileversion, dated~\filedate.}}
% \author{Marcel Kr\"uger \\
%         \href{mailto:tex@2krueger.de}{tex@2krueger.de}}
%
% \maketitle
% Overwrite \texttt{\string\shipout} and |\saveboxresource| with a Lua
% wrapper to
% add callbacks directly before and after shipout.
%
%TODO: Documentation
% 
% \StopEventually{}
% \section{The implementation}
% \changes{0.0.1}{2020-04-11}{Initial release}
% \subsection{Lua module}
% Now we can define our main Lua module:
% \iffalse
%<*gobble>
\RequirePackage{docstrip-luacode}
\begin{docstrip-luacode}{luashipout}
%</gobble>
%<*luacode>
% \fi
%    \begin{macrocode}
local functions = lua.get_functions_table()
local char_given = token.command_id'char_given'
local token_new = token.new
local make_box_token = token.new(0, token.command_id'make_box')

local orig_shipout = tex.shipout
local orig_saveboxresource = tex.saveboxresource
local setbox = tex.setbox
local put_next = token.put_next
local scan_keyword = token.scan_keyword

local begin_group, end_group do
  local runtoks = tex.runtoks
  local begin_group_t = token.new(0, token.command_id'begin_group')
  local function begin_group_f() return put_next(begin_group_t) end
  function begin_group() return runtoks(begin_group_f) end
  local end_group_t = token.new(0, token.command_id'end_group')
  local function end_group_f() return put_next(end_group_t) end
  function end_group() return runtoks(end_group_f) end
end

local function getclearedbox(b)
  put_next(make_box_token, token_new(b, char_given))
  return token.scan_list()
end

luatexbase.create_callback('pre_shipout_filter', 'list')
luatexbase.create_callback('post_shipout', 'simple')
luatexbase.create_callback('shipout', 'exclusive', function(n, k, ...)
  if k == 'page' then
    begin_group()
      setbox(0, n)
      orig_shipout(0)
    end_group()
  elseif k == 'box' then
    return orig_saveboxresource(n, ...)
  else
    error[[Unsupported shipout type]]
  end
end)

local function generic_shipout(n, ...)
  n = node.direct.is_node(n) or getclearedbox(n)
  local new_n = luatexbase.call_callback('pre_shipout_filter', n, ...)
  if new_n == true then
    new_n = n
  elseif new_n == false then
    node.flush_list(n)
    return
  end
  local index = luatexbase.call_callback('shipout', new_n, ...)
%    \end{macrocode}
% In the common case of |kind == 'page'|, |index| will be |nil|.
% It is only releavant for the |saveboxresource| case.
%    \begin{macrocode}
  luatexbase.call_callback('post_shipout', index, ...)
  return index
end

local function shipout(n)
  generic_shipout(n, 'page')
end
tex.shipout = shipout

local function saveboxresource(n, attr, res, imm, t, margin)
  return generic_shipout(n, 'box', attr, res, imm, t, margin)
end
tex.saveboxresource = saveboxresource

local shipout_func =
    luatexbase.new_luafunction'shipout'
local saveboxresource_func =
    luatexbase.new_luafunction'saveboxresource'

functions[shipout_func] = function()
  return shipout(token.scan_list())
end

functions[saveboxresource_func] = function(imm)
  local t = scan_keyword'type' and token.scan_int()
  local attr = scan_keyword'attr' and token.scan_string()
  local resources = scan_keyword'resources' and token.scan_string()
  local margin = scan_keyword'margin' and token.scan_int()
  local box = token.scan_int()
  saveboxresource(box, attr, res, imm == "immediate", t, margin)
end

if 'leader_ship' ~= token.create'shipout'.cmdname then
  tex.error('luashipout: Loaded too late', {
    'luashipout has been loaded after another package already redefined \\shipout.',
    'The redefiniton of the other package will be overwritten. To fix this,',
    'please add \\usepackage{luashipout} as early as possible.',
  })
end
token.set_lua('shipout', shipout_func, 'global', 'protected')
if 'extension' ~= token.create'saveboxresource'.cmdname then
  tex.error('luashipout: Loaded too late', {
    'luashipout has been loaded after another package already redefined \\saveboxresource.',
    'The redefiniton of the other package will be overwritten. To fix this,',
    'please add \\usepackage{luashipout} as early as possible.',
  })
end
token.set_lua('saveboxresource', saveboxresource_func,
              'global', 'protected')
require'luaimmediate'(saveboxresource_func, true)
%    \end{macrocode}
% \iffalse
%</luacode>
%<*gobble>
\end{docstrip-luacode}
%</gobble>
% \fi
% \subsection{\TeX\ support package}
% Most of the time this \TeX\ helper is not needed, but sometimes it
% can be useful to ensure |\shipout| and |\saveboxresource| are
% redefined early enough. Especially this has to be loaded
% \emph{before} \texttt{atbegshi}. (Otherwise we effectively disable
% \texttt{atbegshi})
% \iffalse
%<*package|tex-package>
% \fi
%    \begin{macrocode}
%<*package>
\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage
  {luashipout}
  [2020/04/09 v0.0.1 Lua callbacks for shipout]
%</package>
%    \end{macrocode}
% Only \LuaLaTeX{} is supported.
% For other engines we show an error.
%    \begin{macrocode}
\ifx\directlua\undefined
%    \end{macrocode}
% \iffalse
%<*gobble>
\iffalse
%</gobble>
% \fi \fi
%    \begin{macrocode}
%<*tex-package>
  \begingroup
    \ifx\PackageError\undefined
      \def\PackageError#1#2#3{\errhelp{#3}\errmessage{#1: #2}}
    \fi
%</tex-package>
%    \end{macrocode}
% \iffalse \iffalse
%<*gobble>
\fi
%</gobble>
% \fi
%    \begin{macrocode}
    \PackageError{luashipout}{LuaLaTeX required}%
    {luashipout requires LuaLaTeX.
     Maybe you forgot to switch the engine in your editor?}
%    \end{macrocode}
% \iffalse
%<*gobble>
\iffalse
%</gobble>
% \fi \fi
%    \begin{macrocode}
%<*tex-package>
  \endgroup
%</tex-package>
%    \end{macrocode}
% \iffalse \iffalse
%<*gobble>
\fi
%</gobble>
% \fi
%    \begin{macrocode}
\fi
%    \end{macrocode}
% Load \texttt{luaimmediate}. This would normally be loaded by the
% Lua code directly, but going though \TeX\ allows it to work even
% if only a \texttt{sty} and no \texttt{lua} file exists. Of course,
% the \texttt{sty} file would then have to preload the Lua module too.
%    \begin{macrocode}
\RequirePackage{luaimmediate}
%    \end{macrocode}
% Make sure that \texttt{ltluatex} is loaded.
%    \begin{macrocode}
\ifx\newluafunction\@undefined
  \input ltluatex
\fi
%    \end{macrocode}
% The actual functionality is not that interesting: We just load the
% Lua module.
%    \begin{macrocode}
\directlua{require'luashipout'}
\endinput
%    \end{macrocode}
% \iffalse
%</package|tex-package>
% \fi
% \Finale
